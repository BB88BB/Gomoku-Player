:- initialization main, halt.
:- dynamic black/2.
:- dynamic white/2.
:- dynamic im_white/0.
:- dynamic im_black/0.
:- dynamic candidate/2.
:- dynamic tmp_can/2.
:- dynamic tmp/2.
:- dynamic five/2.
:- dynamic three/2.

%---------------------preprocessing------------------------
read_predicates([H|T]) :-
    read_line_to_codes(user_input, H),
    H \= end_of_file,
    string_codes(Input, H),
    term_string(Term, Input),
    assert(Term),
    read_predicates(T).    
read_predicates([]).



whoami:-
    aggregate_all(count, black(_, _), Cb),
    aggregate_all(count, white(_, _), Cw),
    Count_black is Cb, Count_white is Cw,
    Count_black > Count_white ->  assert(im_white);
    Count_black = Count_white ->  assert(im_black),
    Cb ==0 -> false; true.
%---------------------preprocessing------------------------
% run through all location in this map, 15*15
process:-
    forall((member(H, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),
           member(V, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])),
    (Positions = [H, V], test(Positions), choose(Positions); true)),

    five(A1, A2),  writeAns(A1, A2), !;

    candidate(N1, N2), writeAns(N1, N2), !;

    three(T1, T2),  writeAns(T1, T2), !;

    
	tmp_can(C1, C2), writeAns(C1, C2).
 
 
choose([X, Y]):-
    tmp_can(X, Y), isfoul(X, Y) -> retractall(tmp_can(X, Y));
    five(X, Y), isfoul(X, Y) ->  retractall(five(X, Y));
 
    tmp_can(X, Y),
	countstones(X, Y, 0, 1, 0, Vup), countstones(X, Y, 0, -1, 0, Vdn),
    	V is (Vup + Vdn), (V==3, assert(three(X, Y)); true),
    countstones(X, Y, 1, 0, 0, Hup), countstones(X, Y, -1, 0, 0, Hdn),
    	H is (Hup + Hdn), (H==3, assert(three(X, Y)); true),
    countstones(X, Y, 1, 1, 0, DLup), countstones(X, Y, -1, -1, 0, DLdn),
    	DL is (DLup + DLdn), (DL==3, assert(three(X, Y)); true),
    countstones(X, Y, -1, 1, 0, DRup), countstones(X, Y, 1, -1, 0, DRdn),
    	DR is (DRup + DRdn),(DR==3, assert(three(X, Y)); true),

    
    (V<5, H<5, DR<5, DL<5), ( V>2; H>2; DR>2; DL>2 ),
    ( (Z1 is V*H, Z1 \= 0) ;  (Z2 is V*DL, Z2 \= 0);  (Z3 is V*DR, Z3 \= 0);
      (Z4 is H*DL, Z4 \= 0) ;  (Z5 is V*DR, Z5 \= 0);  (Z6 is DL*DR, Z6 \= 0) ) 
    -> assert(candidate(X,Y));         
	
    true. 



valid(X, Y):- X > 0, X < 16, Y > 0, Y < 16, 
    		\+black(X, Y), \+white(X, Y). 

% if no have stone here, return true.
nothavestone(X, Y):- 
    (black(X, Y); white(X, Y)) ->  false;              
    true. 

% if no surrounding, pruning (test if there have any stone in 8 location)
nosurrounding(X, Y):-
    forall( ( member(Detx, [0, 1, -1]), member(Dety, [0, 1, -1]) ),
 		    ( X1 is X + Detx, Y1 is Y + Dety, nothavestone(X1, Y1)) 
          ).

test([X, Y]):- 
    valid(X, Y), \+nosurrounding(X, Y), 
    ( \+judge(X, Y) ->  true;
		assert(tmp(X, Y)), step2, retractall(tmp(X, Y))
    );
    true.

test2([X, Y]):- 

    valid(X, Y), \+nosurrounding(X, Y), 
    iswin(X, Y) -> 
 	    tmp(M, N), 
    	assert(tmp_can(M, N)), retractall(tmp(M, N)), false;
    true.

step2:-
    forall((member(H, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),
           member(V, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])),   	
            (Positions = [H, V], test2(Positions))).

judge(X, Y):-
    iswin(X, Y) -> assert(five(X, Y)), false;   % already have four   
    isfoul(X, Y) ->  false;
    
	true.


isfoul(X, Y):-
    countblackstones(X, Y, 0, 1, 0, Vup), countblackstones(X, Y, 0, -1, 0, Vdn), 
    countblackjump(X, Y, 0, -1, 0, Vjup), countblackjump(X, Y, 0, -1, 0, Vjdn), 
    	V is (Vup + Vdn + Vjup + Vjdn),
    countblackstones(X, Y, 1, 0, 0, Hup), countblackstones(X, Y, -1, 0, 0, Hdn),
    countblackjump(X, Y, 0, -1, 0, Hjup), countblackjump(X, Y, 0, -1, 0, Hjdn), 
    	H is (Hup + Hdn + Hjup + Hjdn),
    countblackstones(X, Y, 1, 1, 0, DLup), countblackstones(X, Y, -1, -1, 0, DLdn),
    countblackjump(X, Y, 0, -1, 0, DLjup), countblackjump(X, Y, 0, -1, 0, DLjdn), 
    	DL is (DLup + DLdn + DLjup + DLjdn),
    countblackstones(X, Y, -1, 1, 0, DRup), countblackstones(X, Y, 1, -1, 0, DRdn),
    countblackjump(X, Y, 0, -1, 0, DRjup), countblackjump(X, Y, 0, -1, 0, DRjdn),     
    	DR is (DRup + DRdn + DRjup + DRjdn),

    
    ( (V==3, H==3); (V==3, DL==3); (V==3, DR==3);    
      (H==3, DL==3); (H==3, DR==3); (DR==3, DL==3) ) ->  true;
    ( (V==2, H==2); (V==2, DL==2); (V==2, DR==2);
      (H==2, DL==2); (H==2, DR==2); (DR==2, DL==2) ) ->  true;
	false.

countblackstones(X, Y, Detx, Dety, Cs, S):-    
    Xx is (X + Detx), Yy is (Y + Dety), black(Xx, Yy) -> 
    	Cs1 is Cs + 1, countblackstones(Xx, Yy, Detx, Dety, Cs1, S); 
    Cs==2, Xx is (X + Detx), Yy is (Y + Dety),  white(Xx, Yy) -> S is Cs-1;    
    S is Cs.    

countblackjump(X, Y, Detx, Dety, Cj, J):-
    Xx is (X + Detx), Yy is (Y + Dety), \+valid(Xx, Yy) ->  J is Cj;
    Xx is (X + Detx), Yy is (Y + Dety), valid(Xx, Yy), Xxx is (Xx + Detx), Yyy is (Yy + Dety), black(Xxx, Yyy) -> 
    	countblackstones(Xx, Yy, Detx, Dety, Cj, J);
	J is Cj.

iswin(X, Y):-
	countstones(X, Y, 0, 1, 0, Up_straight), countstones(X, Y, 0, -1, 0, Down_straight),
    	Straight is (Up_straight + Down_straight), Straight == 4 ->  true;
    countstones(X, Y, 1, 0, 0, Up_straight), countstones(X, Y, -1, 0, 0, Down_straight),
    	Straight is (Up_straight + Down_straight), Straight == 4 ->  true;  
    countstones(X, Y, 1, 1, 0, Up_straight), countstones(X, Y, -1, -1, 0, Down_straight),
    	Straight is (Up_straight + Down_straight), Straight == 4 ->  true;	
    countstones(X, Y, -1, 1, 0, Up_straight), countstones(X, Y, 1, -1, 0, Down_straight),
    	Straight is (Up_straight + Down_straight), Straight == 4 ->  true;         
	false.

countstones(X, Y, Detx, Dety, Cs, S):-
    Xx is (X + Detx), Yy is (Y + Dety), ism(Xx, Yy) -> 
    	Cs1 is Cs + 1, countstones(Xx, Yy, Detx, Dety, Cs1, S); 
    S is Cs.

ism(X, Y):-
    im_white, black(X, Y) ->  true;
    im_black, white(X, Y) ->  true;
    tmp(X, Y) ->  true ;
    false.


writeAns(Ansx, Ansy):-
    ( im_black ->  format(atom(A), "black(~a, ~a)~n", [Ansx, Ansy]);
      im_white ->  format(atom(A), "white(~a, ~a)~n", [Ansx, Ansy])  ),
    writeln(A).
    
main :-
    read_predicates(X),
    whoami, 
	process.